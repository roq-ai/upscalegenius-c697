generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model account {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  image       image[]
  integration integration[]
  invitation  invitation[]
  team_member team_member[]
}

model image {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  original_size  Int
  upscaled_size  Int
  upscale_factor Int
  account_id     String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  account        account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model integration {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  platform_name String   @db.VarChar(255)
  api_key       String   @db.VarChar(255)
  account_id    String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  account       account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invitee_email String   @db.VarChar(255)
  status        String   @db.VarChar(255)
  account_id    String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  account       account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team_member {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  account_id String   @db.Uuid
  joined_at  DateTime @default(now()) @db.Timestamp(6)
  role       String   @db.VarChar(255)
  status     String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  account    account  @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  account     account[]
  team_member team_member[]
}
